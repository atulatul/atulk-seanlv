# -*- coding: utf-8 -*-
"""COVID-19 and S&P 500 performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1avaVtP9wlQEPX2wi5fAjq4xVseJheENo

### Milestone 1 ###

Project : COVID-19 Impact on S&P 500 index

Project member: atulk,seanlv

Date: 23 May 2022
"""

import pandas as pd
import numpy as np
import io
import requests
url="https://storage.covid19datahub.io/level/1.csv"

#from google.colab import drive
#drive.mount('/content/drive')

file=requests.get(url).content
df=pd.read_csv(io.StringIO(file.decode('utf-8')))

df_main = df[['date','administrative_area_level_1','confirmed','deaths']]
df_main = df_main.dropna(0)

#print(df[['administrative_area_level_1']=='Germany'].head(10))
df = df_main.sort_values(by='date')

df = df.drop('date',axis=1)

df = df.reset_index()

group_df = df.groupby("administrative_area_level_1").tail(1)#apply(get_correct_row)#.tail(1) #tail(2)

group_df = group_df.sort_values(by='confirmed', ascending=False)[:20]
sort_2 = group_df.reset_index()['administrative_area_level_1']   
#print(sort_2.to_numpy  
group_df.head(10)

!pip install altair vega_datasets

import altair as alt
input_dropdown = alt.binding_select(options=sort_2.to_numpy(), name='Country')

group_df["%deaths"] = np.round((group_df['deaths']/group_df['confirmed'])*100,2)

group_df["vs Deaths"] = group_df['deaths']/10
#(group_df['deaths']/group_df['confirmed'])#(#/group_df['confirmed'])
group_df["Confirmed Cases"] = group_df['confirmed']/100
#np.log(group_df['confirmed'])#/group_df['confirmed'])


base = alt.Chart(group_df).encode( x=alt.X('administrative_area_level_1:O', 
                                           axis=alt.Axis(labels=True),
                                           sort=sort_2.to_numpy()),
)

bar = base.mark_bar().encode(y='Confirmed Cases:Q',
                                tooltip=['confirmed', 'deaths', '%deaths', 
                                         'administrative_area_level_1:O']

                            
                            )

line =  base.mark_area(color='red').encode(
    y='vs Deaths:Q',
    tooltip=['confirmed', 'deaths', '%deaths','administrative_area_level_1:O']

)
main_chart_basic_c1 = (bar + line).properties(width=600)

#main_chart_basic_c1 = alt.layer(bar, line).resolve_scale(
#    y = 'independent'
#)

#main_chart_basic_c1 = main_chart_basic_c + line

#alt.themes.enable('fivethirtyeight')
main_chart_basic_c1.configure_axis(
    grid=False
).properties(
    title='Top 20 countries :Confirmed cases vs. Deaths'
)

import altair as alt
input_dropdown = alt.binding_select(options=sort_2.to_numpy(), name='Country')

selection = alt.selection_single(fields=['administrative_area_level_1'], 
                                 bind=input_dropdown)

color = alt.condition(selection,
                    alt.Color('administrative_area_level_1:N',sort=sort_2.
                              to_numpy()),
                    alt.value('black'))


group_df["%deaths"] = (group_df['deaths']/group_df['confirmed'])
main_chart = alt.Chart(group_df).mark_circle(size=100).encode(
    alt.Y('%deaths:Q', axis=alt.Axis(format='.0%')),
    #y='%deaths:Q',
    x='confirmed:Q',
    color=color,#alt.Color('administrative_area_level_1:N',
                #    sort=sort_2.to_numpy(), # SORTING
    #),
    tooltip=['confirmed', 'deaths', 'administrative_area_level_1:O']
).add_selection(
    selection
)



df_country_orig = df_main[df_main['administrative_area_level_1'].
                          isin(group_df.administrative_area_level_1)]

#df_country_orig = df_main[df_main['administrative_area_level_1']==
#'United States']
df_country_1 = df_country_orig['confirmed']
df_country_2 = df_country_orig['deaths']

df_country = df_country_orig.copy()
#df_country['confirmed'] = df_country_1.diff()
#df_country['deaths'] = df_country_2.diff()

df_country["%deaths"] = (df_country['deaths']/df_country['confirmed'])
print(df_country[:10])


selection = alt.selection_single(fields=['administrative_area_level_1'], 
                                 bind=input_dropdown)
color = alt.condition(selection,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy()),
                    alt.value('lightgrey'))


#MULTI SELECTION

selection_1 = alt.selection_multi(fields=['administrative_area_level_1'])

color_1 = alt.condition(selection_1,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy(), legend=None),
                    alt.value('transparent'))

make_selector = alt.Chart(df_country).mark_rect().encode(
    y=alt.Y('administrative_area_level_1:N',sort=sort_2.to_numpy(), title=""),
     color=color_1).add_selection(selection_1)
#########


sub_chart_c = alt.Chart(df_country).mark_line().encode(
    x='date:T',
    y=alt.Y('confirmed:Q',title="Cumulative confirmed cases"),
    #color = 'administrative_area_level_1:N',
    color=color_1,#'administrative_area_level_1:O',
    tooltip=['confirmed', 'deaths', 'administrative_area_level_1:N']
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
).transform_filter(selection_1)

sub_chart_d = alt.Chart(df_country).mark_line().encode(
    x='date:T',
    y=alt.Y('deaths:Q',title="Cumulative Deaths"),
    color=color_1,#'administrative_area_level_1:N',
    tooltip=['confirmed', 'deaths', 'administrative_area_level_1:N']
).transform_filter(selection_1)

alt.data_transformers.disable_max_rows()

test = alt.Chart(df_country).mark_line().encode(
    x=alt.X('deaths:Q',scale=alt.Scale(type='log', domain=[1, 1000000])),
    y=alt.Y(
        'confirmed:Q',scale=alt.Scale(type='log', domain=[1, 100000000])),
    #color ='administrative_area_level_1:N',sort=sort_2.to_numpy(),
    color=alt.Color('administrative_area_level_1:N',
                  sort=sort_2.to_numpy()), # SORTING
    tooltip=['confirmed', 'deaths', 'administrative_area_level_1:N'],
    facet=alt.Facet('administrative_area_level_1:N', columns=4,
                    sort=sort_2.to_numpy()),
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
    width=200,
    height=90
).configure_axis(
    grid=False
)
test

df_country_orig_1 = df_main[df_main['administrative_area_level_1'].
                          isin(group_df.administrative_area_level_1)]
print(group_df.administrative_area_level_1)
#df_country_orig = df_main[df_main['administrative_area_level_1']==
#'United States']
df_country_1 = df_country_orig_1['confirmed']
df_country_2 = df_country_orig_1['deaths']

df_country_daily = df_country_orig_1.copy()
df_country_daily['confirmed'] = df_country_1.diff().dropna()
df_country_daily['deaths'] = df_country_2.diff().dropna()
df_country_daily = df_country_daily[df_country_daily['confirmed'] > 0]
df_country_daily = df_country_daily[df_country_daily['deaths'] > 0]

#df_country_daily["%deaths"] = (df_country_daily['deaths']/df_country['confirmed'])
print(df_country_daily[:10])


selection = alt.selection_single(fields=['administrative_area_level_1'], 
                                 bind=input_dropdown)
color = alt.condition(selection,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy()),
                    alt.value('lightgrey'))


#MULTI SELECTION

selection_1 = alt.selection_multi(fields=['administrative_area_level_1'])

color_1 = alt.condition(selection_1,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy(), legend=None),
                    alt.value('transparent'))

make_selector = alt.Chart(df_country).mark_rect().encode(
    y=alt.Y('administrative_area_level_1:N',sort=sort_2.to_numpy(), title=""),
     color=color_1).add_selection(selection_1)
#########


sub_chart_c_daily = alt.Chart(df_country_daily.dropna()).mark_line(
    line=True
).encode(
    x=alt.X('date:T',axis=alt.Axis(grid=False)),
    y=alt.Y('confirmed:Q',title="Daily confirmed cases",axis=alt.Axis(grid=False)),
    #color = 'administrative_area_level_1:N',
    color=color_1,#'administrative_area_level_1:O',
    tooltip=['date:T','confirmed', 'administrative_area_level_1:N']
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
    width=600,
    height=400
).transform_filter(selection_1).interactive()

sub_chart_d_daily = alt.Chart(df_country_daily.dropna()).mark_line().encode(
    x=alt.X('date:T',axis=alt.Axis(grid=False)),
    y=alt.Y('deaths:Q',title="Daily Deaths",axis=alt.Axis(grid=False)),
    color=color_1,#'administrative_area_level_1:N',
    tooltip=['date:T', 'deaths', 'administrative_area_level_1:N']
).transform_filter(selection_1).properties(
    width=600,
    height=400
).interactive()

alt.data_transformers.disable_max_rows()

sub_chart = alt.layer(sub_chart_c_daily, sub_chart_d_daily).resolve_scale(
    y = 'independent',
    color ='shared'
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
).properties(
    width=1000,
    height=600
)
chart1 = sub_chart.add_selection(
    selection_1
).interactive()

#sub_chart_c_daily | make_selector
chart1 | make_selector
sub_chart_c_daily | make_selector | sub_chart_d_daily

#(main_chart & sub_chart_c) #& (main_chart | sub_chart)
(sub_chart_c | make_selector |sub_chart_d) #& make_selector

selection = alt.selection_single(fields=['administrative_area_level_1'], 
                                 bind=input_dropdown)
color = alt.condition(selection,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy()),
                    alt.value('transparent'))


sub_chart_c_1 = alt.Chart(df_country).mark_line().encode(
    x='date:T',
    y='confirmed:Q',
    #color = 'administrative_area_level_1:N',
    color=color,#'administrative_area_level_1:O',
    tooltip=['date:T','confirmed','administrative_area_level_1:N']
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
)
tick_axis = alt.Axis(labels=True, domain=False, ticks=True)

sub_chart_d_1 = alt.Chart(df_country).mark_tick().encode(
    x='date:T',
    y=alt.Y('deaths:Q',axis=tick_axis, title="Cumulative Deaths"),
    color=color,#'administrative_area_level_1:N',
    tooltip=['date:T', 'deaths', 'administrative_area_level_1:N']
)

sub_chart = alt.layer(sub_chart_c_1, sub_chart_d_1).resolve_scale(
    y = 'independent',
    color ='shared'
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
).configure_axis(
    grid=False,
).properties(
    width=1200,
    height=800
)
sub_chart.add_selection(
    selection
).interactive()

#selection = alt.selection_single(fields=['administrative_area_level_1'], 
#                                 bind=input_dropdown)
selection_1 = alt.selection_multi(fields=['administrative_area_level_1'])

color_1 = alt.condition(selection_1,
                    alt.Color('administrative_area_level_1:N',
                              sort=sort_2.to_numpy()),
                    alt.value('transparent'))

test_1 = alt.Chart(df_country).mark_line().encode(
    x=alt.X('deaths:Q', title ="Deaths"),#scale=alt.Scale(type='log', domain=[1, 1000000])),
    y=alt.Y(
        'confirmed:Q', title="Confirmed Cases"),#scale=alt.Scale(type='log', domain=[1, 100000000])),
    #color ='administrative_area_level_1:N',sort=sort_2.to_numpy(),
    color=alt.Color('administrative_area_level_1:N',legend=None),
    tooltip=['confirmed', 'deaths', 'administrative_area_level_1:N'],
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
).transform_filter(selection_1)

make_selector = alt.Chart(df_country).mark_rect().encode(
    x=alt.X('administrative_area_level_1:N',sort=sort_2.to_numpy(), title=""),
     color=color_1).add_selection(selection_1)

test_1 & make_selector

sub_chart_c_1 = alt.Chart(df_country).mark_line().encode(
    x='date:T',
    y='confirmed:Q',
    #color = 'administrative_area_level_1:N',
    color=color,#'administrative_area_level_1:O',
    tooltip=['date:T','confirmed','administrative_area_level_1:N']
).properties(
    title='COVID-19 Confrimed Cases Vs Deaths Top 20 Countries',
)
tick_axis = alt.Axis(labels=True, domain=False, ticks=True)

sub_chart_d_1 = alt.Chart(df_country).mark_tick().encode(
    x='date:T',
    y=alt.Y('deaths:Q',axis=tick_axis, title="Cumulative Deaths"),
    color=color,#'administrative_area_level_1:N',
    tooltip=['date:T', 'deaths', 'administrative_area_level_1:N']
)

!pip install yfinance

import yfinance as yf  
import matplotlib.pyplot as plt
#major worldwide index
table_index_worldwide = ['^GSPC', '^DJI', '^IXIC', '^NYA','^N225','^BSESN','^VIX','^N100']
index_data_main = []
# Lets download the data using yfinance for specific period
df_index = pd.DataFrame()
for index in table_index_worldwide:
  fullindexdata = "index_data" + index
  fullindexdata = yf.download(index, '2020-03-01', '2022-05-11')
  df_index[index] = (fullindexdata['Adj Close'])
  #fullindexdata = fullindexdata['Adj Close']
  #index_data_main.append(fullindexdata)
df_index

(df_index.info)
human_readable_index_worldwide = ['S&P 500', 'Dow 30', 'Nasdaq',
                                  'NYSE COMPOSITE (DJ)', 
                                  ' Nikkei 225', 'S&P BSE SENSEX',
                                  'CBOE Volatility Index',
                                  'Euronext 100 Index']

df_index_filled = df_index.fillna(method='bfill')
df_index_filled.columns = human_readable_index_worldwide
df_index_filled.describe()
df_index_filled_mean = df_index_filled/np.max(df_index_filled)#
df_index_filled_mean = df_index_filled_mean.rolling(5,1).mean()

df_index_filled_mean = df_index_filled_mean.reset_index()
df_index_filled = df_index_filled.rolling(5,1).mean()
df_index_filled = df_index_filled.reset_index()

df_index_filled.head()

from pandas.core.indexes.base import Index
mean_val_chart = alt.Chart(df_index_filled_mean).transform_fold(
    human_readable_index_worldwide,
    as_=['Index', 'value']
).mark_line().encode(
    x='Date:T',
    y='value:Q',
    color='Index:N',
    tooltip = ['Index:N', 'value:Q']
).properties(
    width=800,
    height=600,
    title='Select world top index mean adjusted (value/mean) value N Time',

).interactive()

normal_index_chart = alt.Chart(df_index_filled).transform_fold(
    human_readable_index_worldwide,
    as_=['Index', 'value']
).mark_line().encode(
    x='Date:T',
    y='value:Q',
    color='Index:N',
    tooltip = ['Index:N', 'value:Q']
).properties(
    width=800,
    height=600,
    title='Selected index value N Time',

).interactive()

normal_index_chart

# Lets check corelation among all selected indexes
df_index_filled_test = df_index_filled.drop('Date', axis=1)
df_index_filled_test.corr()

df_index_filled['S&P 500']

import yfinance as yf  
import matplotlib.pyplot as plt

table_companies = \
pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')

df_snp_comp = table_companies[0][['Symbol','GICS Sector']]

print(df_snp_comp.groupby(['GICS Sector']).tail(df_snp_comp.shape[0]))
stockdata = df_snp_comp['Symbol'].to_list()
#index = '^GSPC'
#full_stock_data = yf.download(index, '2020-03-01', '2022-05-11')

#Get US Pharma index data

us_pharma_index_new = pd.DataFrame()

pharma_index = '^DRG'
us_pharma_index =  yf.download(pharma_index, '2020-03-01','2022-05-11')
#us_pharma_index_new = us_pharma_index['Adj Close']
us_pharma_index_new['Adj Close'] = us_pharma_index['Adj Close']/ \
                              np.max(us_pharma_index['Adj Close'])
us_pharma_index_new = us_pharma_index_new.rolling(5, min_periods=1).mean()
us_pharma_index_new = us_pharma_index_new.reset_index()

print("Correlation between SNP500 and DRG index")

print(us_pharma_index_new['Adj Close'].corr(df_index_filled['S&P 500']))

df_country_us = df_main[df_main['administrative_area_level_1']==
                        'United States']
df_country_us['confirmed'] = df_country_us['confirmed'].diff().dropna()#. \
                            #pct_change().dropna()
#df_country_us['confirmed'] = df_country_us['confirmed']/np.max(df_country_us['confirmed'])

#df_country_us = df_country_us.set_index('date')
df_country_us['confirmed'] = df_country_us['confirmed'].rolling(7,1).mean()
#df_country_us = df_country_us.reset_index

sub_chart_c_1 = alt.Chart(df_country_us).mark_line(color='red').encode(
    x=alt.X('date:T',axis=alt.Axis(labels=True)),
    y='confirmed:Q',
    tooltip=['date:T','confirmed','administrative_area_level_1:N']
)
SNP500_chart = alt.Chart(df_index_filled).mark_trail().encode(
    x=alt.X('Date:T',axis=alt.Axis(labels=True)),
    y=alt.Y('S&P 500:Q', axis=alt.Axis(labels=True)),
    tooltip = ['Date:T', 'S&P 500:Q']
).properties(
    width=800,
    height=600,
).interactive()

sub_chart = alt.layer(sub_chart_c_1, SNP500_chart).resolve_scale(
    y = 'independent',
    #color ='shared'
).properties(
    title='COVID-19 Confrimed Cases Vs S&P 500 weekly chart',
).configure_axis(
    grid=False,
).properties(
    width=800,
    height=600
)
sub_chart.add_selection(
    selection
).interactive()
sub_chart

table_companies = \
pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')

df_snp_comp = table_companies[0][['Symbol','GICS Sector']]

stockdata = df_snp_comp['Symbol'].to_list()
full_snp500_data = yf.download(stockdata, '2020-03-01', '2022-05-11')

full_snp500_data.describe()
group_index = df_snp_comp.sort_values(['GICS Sector'],ascending=True).groupby(['GICS Sector']).tail(df_snp_comp.shape[0])
full_snp500_data = full_snp500_data.reset_index()
print(group_index['GICS Sector'].unique())
full_snp500_data = full_snp500_data.set_index('Date')
full_snp500_data_new= full_snp500_data['Adj Close'][group_index['Symbol']]

main_sector_df = pd.DataFrame(columns=group_index['GICS Sector'].unique())
sector_list = []
sector_df = ""
for sector in group_index['GICS Sector'].unique():
  frame = sector_df + sector
  symbols_sector = group_index[(group_index['GICS Sector']== sector)]['Symbol']
  frame = full_snp500_data['Adj Close'][symbols_sector.to_list()]
  frame['avg'] = frame.mean(axis=1)
  main_sector_df[sector]= frame['avg']
  sector_list.append(frame)

from pandas.core.indexes.base import Index
mean_val_sector_chart = alt.Chart(main_sector_df.reset_index()).transform_fold(
    group_index['GICS Sector'].unique(),
    as_=['Sector', 'index value']
).mark_line().encode(
    x='Date:T',
    y='index value:Q',
    color='Sector:N',
    tooltip = ['Sector:N', 'index value:Q']
).properties(
    width=800,
    height=600,
    title='S&P500 sector index (average) with Time (during COVID-19)',

).interactive()

mean_val_sector_chart#main_sector_df.head(1)

df_country_us = df_main[df_main['administrative_area_level_1']==
                        'United States']
df_country_us['confirmed'] = df_country_us['confirmed'].diff().dropna()#. \
                            #pct_change().dropna()
#df_country_us['confirmed'] = df_country_us['confirmed']/np.max(df_country_us['confirmed'])

#df_country_us = df_country_us.set_index('date')
df_country_us['confirmed'] = df_country_us['confirmed'].rolling(7,1).mean()
#df_country_us = df_country_us.reset_index

sub_chart_c_rolling_weekly = alt.Chart(df_country_us).mark_trail(color='red').encode(
    x=alt.X('date:T',axis=alt.Axis(labels=True)),
    y='confirmed:Q',
    tooltip=['date:T','confirmed','administrative_area_level_1:N']
)

from pandas.core.indexes.base import Index
mean_val_sector_chart_rolling_weekly = alt.Chart(main_sector_df.rolling(7,1).mean().
                                                 reset_index()).transform_fold(
    group_index['GICS Sector'].unique(),
    as_=['Sector', 'index value']
).mark_line().encode(
    x='Date:T',
    y='index value:Q',
    color='Sector:N',
    tooltip = ['Date:T','Sector:N', 'index value:Q']
).properties(
    width=800,
    height=600,
    title='S&P500 sector index (average) with Time (during COVID-19)',

).interactive()

sub_chart = alt.layer(sub_chart_c_rolling_weekly, mean_val_sector_chart_rolling_weekly).resolve_scale(
    y = 'independent',
    #color ='shared'
).properties(
    title='COVID-19 Confrimed Cases Vs S&P 500 sector(mean value of all stocks) chart(Weekly Mean)',
).configure_axis(
    #grid=False,
).properties(
    width=800,
    height=600
)
sub_chart.add_selection(
    selection
).interactive()
sub_chart



